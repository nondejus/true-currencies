pragma solidity ^0.5.13;

import { TrueUSD } from "../TrueCurrencies/TrueUSD.sol";
import { OwnedUpgradeabilityProxy } from "../TrueCurrencies/Proxy/OwnedUpgradeabilityProxy.sol";
import { TokenController } from "../TrueCurrencies/admin/TokenController.sol";
import { AssuredFinancialOpportunity } from "../TrueReward/AssuredFinancialOpportunity.sol";
import { FinancialOpportunity } from "../TrueReward/FinancialOpportunity.sol";
import { IExponentContract } from "../TrueReward/utilities/IExponentContract.sol";
import { StakedToken } from "@trusttoken/trusttokens/contracts/StakingAsset.sol";
import { Liquidator } from "@trusttoken/trusttokens/contracts/Liquidator.sol";

/**
 * @title DeployHelper
 * @dev Use this contract to deploy from scratch
 * Deploy contracts using a script and pass addresses into setUp
 * Deployer of DeployHelper will be final owner of proxy contracts
 *
 * Use UpgradeHelper to upgrade existing contracts
 */
contract UpgradeHelper2 {
    /**
     * @dev Setup TrueUSD
     * msg.sender needs to own all the deployed contracts
     * msg.sender needs to transfer ownership to this contract for:
     * trueUSD, trueUSDProxy, tokenController, tokenControllerProxy,
     * liquidator, assurancePool
     */
    function setUp(
        address registryAddress,
        address trueUSDAddress,
        address trueUSDProxyAddress,
        address tokenControllerAddress,
        address tokenControllerProxyAddress,
        address assuredOpportunityAddress,
        address assuredOpportunityProxyAddress,
        address financialOpportunityAddress,
        address exponentContractAddress,
        address assurancePoolAddress,
        address liquidatorAddress
    ) external {
        address owner = msg.sender;
        assert(registryAddress != address(0), "cannot be address(0)");
        assert(trueUSDAddress != address(0), "cannot be address(0)");
        assert(trueUSDProxyAddress != address(0), "cannot be address(0)");
        assert(assuredOpportunityProxyAddress != address(0), "cannot be address(0)");
        assert(assuredOpportunityAddress != address(0), "cannot be address(0)");
        assert(financialOpportunityAddress != address(0), "cannot be address(0)");
        assert(exponentContractAddress != address(0), "cannot be address(0)");
        assert(tokenControllerAddress != address(0), "cannot be address(0)");
        assert(tokenControllerProxyAddress != address(0), "cannot be address(0)");
        assert(assurancePoolAddress != address(0), "cannot be address(0)");
        assert(liquidatorAddress != address(0), "cannot be address(0)");

        // setup implementations
        TrueUSD trueUSD = TrueUSD(trueUSDAddress);
        OwnedUpgradeabilityProxy trueUSDProxy = OwnedUpgradeabilityProxy(trueUSDProxyAddress);
        TokenController tokenController = TokenController(tokenControllerAddress);
        OwnedUpgradeabilityProxy tokenControllerProxy = OwnedUpgradeabilityProxy(tokenControllerAddress);
        AssuredFinancialOpportunity assuredOpportunity = AssuredFinancialOpportunity(assuredOpportunityAddress);
        OwnedUpgradeabilityProxy assuredOpportunityProxy =  OwnedUpgradeabilityProxy(assuredOpportunityProxyAddress);
        FinancialOpportunity financialOpportunity = FinancialOpportunity(financialOpportunityAddress);
        IExponentContract exponentContract = IExponentContract(exponentContractAddress);
        StakedToken assurancePool = StakedToken(assurancePoolAddress);
        Liquidator liquidator = Liquidator(liquidatorAddress);

        // 1. Init TrueUSD & TokenController
        // Claim ownership
        tokenController.claimOwnership();
        tokenControllerProxy.claimProxyOwnership();
        trueUSD.claimOwnership();
        trueUSDProxy.claimProxyOwnership();

        // Setup
        tokenController.initialize();
        tokenController.setToken(trueUSDAddress);
        tokenController.setTokenRegistry(registryAddress);
        tokenController.issueClaimOwnership(trueUSDAddress);
        trueUSDProxy.upgradeTo(trueUSDAddress);
        trueUSD.setAaveInterfaceAddress(assuredOpportunityProxyAddress);

        // transfer trueUSD ownership to token controller
        trueUSD.transferOwnership(address(tokenController));

        // Transfer ownership of proxy and controller to owner
        tokenController.transferOwnership(owner);
        tokenControllerProxy.transferOwnership(owner);

        // 2. Init Assurance
        // assurancePool is set up during constructor
        liquidator.claimOwnership();
        liquidator.setPool(assurancePoolAddress);

        // 3. Init Opportunity
        assuredOpportunityProxy.claimProxyOwnership();
        assuredOpportunityProxy.upgradeTo(assuredOpportunityAddress);

        assuredOpportunity.configure(
            financialOpportunity, // address _opportunityAddress
            assurancePoolAddress, // address _assuranceAddress
            liquidatorAddress, // address _liquidatorAddress
            exponentContractAddress, // address _exponentContractAddress
            trueUSDAddress // address _trueRewardBackedTokenAddress
        );

        // Transfer ownership to proxy
        assuredOpportunity.transferOwnership(assuredOpportunityProxyAddress);

        // Transfer proxy to owner
        assuredOpportunityProxy.transferProxyOwnership(owner);
  }
}

